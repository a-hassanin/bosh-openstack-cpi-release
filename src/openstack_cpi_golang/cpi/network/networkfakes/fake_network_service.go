// Code generated by counterfeiter. DO NOT EDIT.
package networkfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cpi-go/apiv1"
	"github.com/cloudfoundry/bosh-openstack-cpi-release/src/openstack_cpi_golang/cpi/config"
	"github.com/cloudfoundry/bosh-openstack-cpi-release/src/openstack_cpi_golang/cpi/network"
	"github.com/cloudfoundry/bosh-openstack-cpi-release/src/openstack_cpi_golang/cpi/properties"
	"github.com/gophercloud/gophercloud/openstack/networking/v2/ports"
)

type FakeNetworkService struct {
	ConfigureVIPNetworkStub        func(string, properties.NetworkConfig) error
	configureVIPNetworkMutex       sync.RWMutex
	configureVIPNetworkArgsForCall []struct {
		arg1 string
		arg2 properties.NetworkConfig
	}
	configureVIPNetworkReturns struct {
		result1 error
	}
	configureVIPNetworkReturnsOnCall map[int]struct {
		result1 error
	}
	CreatePortStub        func(properties.Network, []string, properties.CreateVM) (ports.Port, error)
	createPortMutex       sync.RWMutex
	createPortArgsForCall []struct {
		arg1 properties.Network
		arg2 []string
		arg3 properties.CreateVM
	}
	createPortReturns struct {
		result1 ports.Port
		result2 error
	}
	createPortReturnsOnCall map[int]struct {
		result1 ports.Port
		result2 error
	}
	DeletePortsStub        func([]ports.Port) error
	deletePortsMutex       sync.RWMutex
	deletePortsArgsForCall []struct {
		arg1 []ports.Port
	}
	deletePortsReturns struct {
		result1 error
	}
	deletePortsReturnsOnCall map[int]struct {
		result1 error
	}
	GetNetworkConfigurationStub        func(apiv1.Networks, config.OpenstackConfig, properties.CreateVM) (properties.NetworkConfig, error)
	getNetworkConfigurationMutex       sync.RWMutex
	getNetworkConfigurationArgsForCall []struct {
		arg1 apiv1.Networks
		arg2 config.OpenstackConfig
		arg3 properties.CreateVM
	}
	getNetworkConfigurationReturns struct {
		result1 properties.NetworkConfig
		result2 error
	}
	getNetworkConfigurationReturnsOnCall map[int]struct {
		result1 properties.NetworkConfig
		result2 error
	}
	GetPortsStub        func(string, properties.Network, bool) ([]ports.Port, error)
	getPortsMutex       sync.RWMutex
	getPortsArgsForCall []struct {
		arg1 string
		arg2 properties.Network
		arg3 bool
	}
	getPortsReturns struct {
		result1 []ports.Port
		result2 error
	}
	getPortsReturnsOnCall map[int]struct {
		result1 []ports.Port
		result2 error
	}
	GetSubnetIDStub        func(string, string) (string, error)
	getSubnetIDMutex       sync.RWMutex
	getSubnetIDArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSubnetIDReturns struct {
		result1 string
		result2 error
	}
	getSubnetIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNetworkService) ConfigureVIPNetwork(arg1 string, arg2 properties.NetworkConfig) error {
	fake.configureVIPNetworkMutex.Lock()
	ret, specificReturn := fake.configureVIPNetworkReturnsOnCall[len(fake.configureVIPNetworkArgsForCall)]
	fake.configureVIPNetworkArgsForCall = append(fake.configureVIPNetworkArgsForCall, struct {
		arg1 string
		arg2 properties.NetworkConfig
	}{arg1, arg2})
	stub := fake.ConfigureVIPNetworkStub
	fakeReturns := fake.configureVIPNetworkReturns
	fake.recordInvocation("ConfigureVIPNetwork", []interface{}{arg1, arg2})
	fake.configureVIPNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkService) ConfigureVIPNetworkCallCount() int {
	fake.configureVIPNetworkMutex.RLock()
	defer fake.configureVIPNetworkMutex.RUnlock()
	return len(fake.configureVIPNetworkArgsForCall)
}

func (fake *FakeNetworkService) ConfigureVIPNetworkCalls(stub func(string, properties.NetworkConfig) error) {
	fake.configureVIPNetworkMutex.Lock()
	defer fake.configureVIPNetworkMutex.Unlock()
	fake.ConfigureVIPNetworkStub = stub
}

func (fake *FakeNetworkService) ConfigureVIPNetworkArgsForCall(i int) (string, properties.NetworkConfig) {
	fake.configureVIPNetworkMutex.RLock()
	defer fake.configureVIPNetworkMutex.RUnlock()
	argsForCall := fake.configureVIPNetworkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNetworkService) ConfigureVIPNetworkReturns(result1 error) {
	fake.configureVIPNetworkMutex.Lock()
	defer fake.configureVIPNetworkMutex.Unlock()
	fake.ConfigureVIPNetworkStub = nil
	fake.configureVIPNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkService) ConfigureVIPNetworkReturnsOnCall(i int, result1 error) {
	fake.configureVIPNetworkMutex.Lock()
	defer fake.configureVIPNetworkMutex.Unlock()
	fake.ConfigureVIPNetworkStub = nil
	if fake.configureVIPNetworkReturnsOnCall == nil {
		fake.configureVIPNetworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.configureVIPNetworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkService) CreatePort(arg1 properties.Network, arg2 []string, arg3 properties.CreateVM) (ports.Port, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createPortMutex.Lock()
	ret, specificReturn := fake.createPortReturnsOnCall[len(fake.createPortArgsForCall)]
	fake.createPortArgsForCall = append(fake.createPortArgsForCall, struct {
		arg1 properties.Network
		arg2 []string
		arg3 properties.CreateVM
	}{arg1, arg2Copy, arg3})
	stub := fake.CreatePortStub
	fakeReturns := fake.createPortReturns
	fake.recordInvocation("CreatePort", []interface{}{arg1, arg2Copy, arg3})
	fake.createPortMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkService) CreatePortCallCount() int {
	fake.createPortMutex.RLock()
	defer fake.createPortMutex.RUnlock()
	return len(fake.createPortArgsForCall)
}

func (fake *FakeNetworkService) CreatePortCalls(stub func(properties.Network, []string, properties.CreateVM) (ports.Port, error)) {
	fake.createPortMutex.Lock()
	defer fake.createPortMutex.Unlock()
	fake.CreatePortStub = stub
}

func (fake *FakeNetworkService) CreatePortArgsForCall(i int) (properties.Network, []string, properties.CreateVM) {
	fake.createPortMutex.RLock()
	defer fake.createPortMutex.RUnlock()
	argsForCall := fake.createPortArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNetworkService) CreatePortReturns(result1 ports.Port, result2 error) {
	fake.createPortMutex.Lock()
	defer fake.createPortMutex.Unlock()
	fake.CreatePortStub = nil
	fake.createPortReturns = struct {
		result1 ports.Port
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkService) CreatePortReturnsOnCall(i int, result1 ports.Port, result2 error) {
	fake.createPortMutex.Lock()
	defer fake.createPortMutex.Unlock()
	fake.CreatePortStub = nil
	if fake.createPortReturnsOnCall == nil {
		fake.createPortReturnsOnCall = make(map[int]struct {
			result1 ports.Port
			result2 error
		})
	}
	fake.createPortReturnsOnCall[i] = struct {
		result1 ports.Port
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkService) DeletePorts(arg1 []ports.Port) error {
	var arg1Copy []ports.Port
	if arg1 != nil {
		arg1Copy = make([]ports.Port, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deletePortsMutex.Lock()
	ret, specificReturn := fake.deletePortsReturnsOnCall[len(fake.deletePortsArgsForCall)]
	fake.deletePortsArgsForCall = append(fake.deletePortsArgsForCall, struct {
		arg1 []ports.Port
	}{arg1Copy})
	stub := fake.DeletePortsStub
	fakeReturns := fake.deletePortsReturns
	fake.recordInvocation("DeletePorts", []interface{}{arg1Copy})
	fake.deletePortsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkService) DeletePortsCallCount() int {
	fake.deletePortsMutex.RLock()
	defer fake.deletePortsMutex.RUnlock()
	return len(fake.deletePortsArgsForCall)
}

func (fake *FakeNetworkService) DeletePortsCalls(stub func([]ports.Port) error) {
	fake.deletePortsMutex.Lock()
	defer fake.deletePortsMutex.Unlock()
	fake.DeletePortsStub = stub
}

func (fake *FakeNetworkService) DeletePortsArgsForCall(i int) []ports.Port {
	fake.deletePortsMutex.RLock()
	defer fake.deletePortsMutex.RUnlock()
	argsForCall := fake.deletePortsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkService) DeletePortsReturns(result1 error) {
	fake.deletePortsMutex.Lock()
	defer fake.deletePortsMutex.Unlock()
	fake.DeletePortsStub = nil
	fake.deletePortsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkService) DeletePortsReturnsOnCall(i int, result1 error) {
	fake.deletePortsMutex.Lock()
	defer fake.deletePortsMutex.Unlock()
	fake.DeletePortsStub = nil
	if fake.deletePortsReturnsOnCall == nil {
		fake.deletePortsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePortsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkService) GetNetworkConfiguration(arg1 apiv1.Networks, arg2 config.OpenstackConfig, arg3 properties.CreateVM) (properties.NetworkConfig, error) {
	fake.getNetworkConfigurationMutex.Lock()
	ret, specificReturn := fake.getNetworkConfigurationReturnsOnCall[len(fake.getNetworkConfigurationArgsForCall)]
	fake.getNetworkConfigurationArgsForCall = append(fake.getNetworkConfigurationArgsForCall, struct {
		arg1 apiv1.Networks
		arg2 config.OpenstackConfig
		arg3 properties.CreateVM
	}{arg1, arg2, arg3})
	stub := fake.GetNetworkConfigurationStub
	fakeReturns := fake.getNetworkConfigurationReturns
	fake.recordInvocation("GetNetworkConfiguration", []interface{}{arg1, arg2, arg3})
	fake.getNetworkConfigurationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkService) GetNetworkConfigurationCallCount() int {
	fake.getNetworkConfigurationMutex.RLock()
	defer fake.getNetworkConfigurationMutex.RUnlock()
	return len(fake.getNetworkConfigurationArgsForCall)
}

func (fake *FakeNetworkService) GetNetworkConfigurationCalls(stub func(apiv1.Networks, config.OpenstackConfig, properties.CreateVM) (properties.NetworkConfig, error)) {
	fake.getNetworkConfigurationMutex.Lock()
	defer fake.getNetworkConfigurationMutex.Unlock()
	fake.GetNetworkConfigurationStub = stub
}

func (fake *FakeNetworkService) GetNetworkConfigurationArgsForCall(i int) (apiv1.Networks, config.OpenstackConfig, properties.CreateVM) {
	fake.getNetworkConfigurationMutex.RLock()
	defer fake.getNetworkConfigurationMutex.RUnlock()
	argsForCall := fake.getNetworkConfigurationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNetworkService) GetNetworkConfigurationReturns(result1 properties.NetworkConfig, result2 error) {
	fake.getNetworkConfigurationMutex.Lock()
	defer fake.getNetworkConfigurationMutex.Unlock()
	fake.GetNetworkConfigurationStub = nil
	fake.getNetworkConfigurationReturns = struct {
		result1 properties.NetworkConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkService) GetNetworkConfigurationReturnsOnCall(i int, result1 properties.NetworkConfig, result2 error) {
	fake.getNetworkConfigurationMutex.Lock()
	defer fake.getNetworkConfigurationMutex.Unlock()
	fake.GetNetworkConfigurationStub = nil
	if fake.getNetworkConfigurationReturnsOnCall == nil {
		fake.getNetworkConfigurationReturnsOnCall = make(map[int]struct {
			result1 properties.NetworkConfig
			result2 error
		})
	}
	fake.getNetworkConfigurationReturnsOnCall[i] = struct {
		result1 properties.NetworkConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkService) GetPorts(arg1 string, arg2 properties.Network, arg3 bool) ([]ports.Port, error) {
	fake.getPortsMutex.Lock()
	ret, specificReturn := fake.getPortsReturnsOnCall[len(fake.getPortsArgsForCall)]
	fake.getPortsArgsForCall = append(fake.getPortsArgsForCall, struct {
		arg1 string
		arg2 properties.Network
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.GetPortsStub
	fakeReturns := fake.getPortsReturns
	fake.recordInvocation("GetPorts", []interface{}{arg1, arg2, arg3})
	fake.getPortsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkService) GetPortsCallCount() int {
	fake.getPortsMutex.RLock()
	defer fake.getPortsMutex.RUnlock()
	return len(fake.getPortsArgsForCall)
}

func (fake *FakeNetworkService) GetPortsCalls(stub func(string, properties.Network, bool) ([]ports.Port, error)) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = stub
}

func (fake *FakeNetworkService) GetPortsArgsForCall(i int) (string, properties.Network, bool) {
	fake.getPortsMutex.RLock()
	defer fake.getPortsMutex.RUnlock()
	argsForCall := fake.getPortsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNetworkService) GetPortsReturns(result1 []ports.Port, result2 error) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = nil
	fake.getPortsReturns = struct {
		result1 []ports.Port
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkService) GetPortsReturnsOnCall(i int, result1 []ports.Port, result2 error) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = nil
	if fake.getPortsReturnsOnCall == nil {
		fake.getPortsReturnsOnCall = make(map[int]struct {
			result1 []ports.Port
			result2 error
		})
	}
	fake.getPortsReturnsOnCall[i] = struct {
		result1 []ports.Port
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkService) GetSubnetID(arg1 string, arg2 string) (string, error) {
	fake.getSubnetIDMutex.Lock()
	ret, specificReturn := fake.getSubnetIDReturnsOnCall[len(fake.getSubnetIDArgsForCall)]
	fake.getSubnetIDArgsForCall = append(fake.getSubnetIDArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetSubnetIDStub
	fakeReturns := fake.getSubnetIDReturns
	fake.recordInvocation("GetSubnetID", []interface{}{arg1, arg2})
	fake.getSubnetIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkService) GetSubnetIDCallCount() int {
	fake.getSubnetIDMutex.RLock()
	defer fake.getSubnetIDMutex.RUnlock()
	return len(fake.getSubnetIDArgsForCall)
}

func (fake *FakeNetworkService) GetSubnetIDCalls(stub func(string, string) (string, error)) {
	fake.getSubnetIDMutex.Lock()
	defer fake.getSubnetIDMutex.Unlock()
	fake.GetSubnetIDStub = stub
}

func (fake *FakeNetworkService) GetSubnetIDArgsForCall(i int) (string, string) {
	fake.getSubnetIDMutex.RLock()
	defer fake.getSubnetIDMutex.RUnlock()
	argsForCall := fake.getSubnetIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNetworkService) GetSubnetIDReturns(result1 string, result2 error) {
	fake.getSubnetIDMutex.Lock()
	defer fake.getSubnetIDMutex.Unlock()
	fake.GetSubnetIDStub = nil
	fake.getSubnetIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkService) GetSubnetIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.getSubnetIDMutex.Lock()
	defer fake.getSubnetIDMutex.Unlock()
	fake.GetSubnetIDStub = nil
	if fake.getSubnetIDReturnsOnCall == nil {
		fake.getSubnetIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getSubnetIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.configureVIPNetworkMutex.RLock()
	defer fake.configureVIPNetworkMutex.RUnlock()
	fake.createPortMutex.RLock()
	defer fake.createPortMutex.RUnlock()
	fake.deletePortsMutex.RLock()
	defer fake.deletePortsMutex.RUnlock()
	fake.getNetworkConfigurationMutex.RLock()
	defer fake.getNetworkConfigurationMutex.RUnlock()
	fake.getPortsMutex.RLock()
	defer fake.getPortsMutex.RUnlock()
	fake.getSubnetIDMutex.RLock()
	defer fake.getSubnetIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNetworkService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ network.NetworkService = new(FakeNetworkService)
