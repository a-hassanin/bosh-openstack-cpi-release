// Code generated by counterfeiter. DO NOT EDIT.
package loadbalancerfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-openstack-cpi-release/src/openstack_cpi_golang/cpi/loadbalancer"
	"github.com/cloudfoundry/bosh-openstack-cpi-release/src/openstack_cpi_golang/cpi/utils"
	"github.com/gophercloud/gophercloud/openstack/loadbalancer/v2/listeners"
	"github.com/gophercloud/gophercloud/openstack/loadbalancer/v2/loadbalancers"
	"github.com/gophercloud/gophercloud/openstack/loadbalancer/v2/pools"
	"github.com/gophercloud/gophercloud/pagination"
)

type FakeLoadbalancerFacade struct {
	CreatePoolMemberStub        func(utils.ServiceClient, string, pools.CreateMemberOpts) (*pools.Member, error)
	createPoolMemberMutex       sync.RWMutex
	createPoolMemberArgsForCall []struct {
		arg1 utils.ServiceClient
		arg2 string
		arg3 pools.CreateMemberOpts
	}
	createPoolMemberReturns struct {
		result1 *pools.Member
		result2 error
	}
	createPoolMemberReturnsOnCall map[int]struct {
		result1 *pools.Member
		result2 error
	}
	DeletePoolMemberStub        func(utils.RetryableServiceClient, string, string) error
	deletePoolMemberMutex       sync.RWMutex
	deletePoolMemberArgsForCall []struct {
		arg1 utils.RetryableServiceClient
		arg2 string
		arg3 string
	}
	deletePoolMemberReturns struct {
		result1 error
	}
	deletePoolMemberReturnsOnCall map[int]struct {
		result1 error
	}
	ExtractPoolMembersStub        func(pagination.Page) ([]pools.Member, error)
	extractPoolMembersMutex       sync.RWMutex
	extractPoolMembersArgsForCall []struct {
		arg1 pagination.Page
	}
	extractPoolMembersReturns struct {
		result1 []pools.Member
		result2 error
	}
	extractPoolMembersReturnsOnCall map[int]struct {
		result1 []pools.Member
		result2 error
	}
	ExtractPoolsStub        func(pagination.Page) ([]pools.Pool, error)
	extractPoolsMutex       sync.RWMutex
	extractPoolsArgsForCall []struct {
		arg1 pagination.Page
	}
	extractPoolsReturns struct {
		result1 []pools.Pool
		result2 error
	}
	extractPoolsReturnsOnCall map[int]struct {
		result1 []pools.Pool
		result2 error
	}
	GetListenerStub        func(utils.RetryableServiceClient, string) (*listeners.Listener, error)
	getListenerMutex       sync.RWMutex
	getListenerArgsForCall []struct {
		arg1 utils.RetryableServiceClient
		arg2 string
	}
	getListenerReturns struct {
		result1 *listeners.Listener
		result2 error
	}
	getListenerReturnsOnCall map[int]struct {
		result1 *listeners.Listener
		result2 error
	}
	GetLoadbalancerStub        func(utils.RetryableServiceClient, string) (*loadbalancers.LoadBalancer, error)
	getLoadbalancerMutex       sync.RWMutex
	getLoadbalancerArgsForCall []struct {
		arg1 utils.RetryableServiceClient
		arg2 string
	}
	getLoadbalancerReturns struct {
		result1 *loadbalancers.LoadBalancer
		result2 error
	}
	getLoadbalancerReturnsOnCall map[int]struct {
		result1 *loadbalancers.LoadBalancer
		result2 error
	}
	GetPoolStub        func(utils.RetryableServiceClient, string) (*pools.Pool, error)
	getPoolMutex       sync.RWMutex
	getPoolArgsForCall []struct {
		arg1 utils.RetryableServiceClient
		arg2 string
	}
	getPoolReturns struct {
		result1 *pools.Pool
		result2 error
	}
	getPoolReturnsOnCall map[int]struct {
		result1 *pools.Pool
		result2 error
	}
	ListPoolMembersStub        func(utils.RetryableServiceClient, string, pools.ListMembersOpts) (pagination.Page, error)
	listPoolMembersMutex       sync.RWMutex
	listPoolMembersArgsForCall []struct {
		arg1 utils.RetryableServiceClient
		arg2 string
		arg3 pools.ListMembersOpts
	}
	listPoolMembersReturns struct {
		result1 pagination.Page
		result2 error
	}
	listPoolMembersReturnsOnCall map[int]struct {
		result1 pagination.Page
		result2 error
	}
	ListPoolsStub        func(utils.RetryableServiceClient, pools.ListOpts) (pagination.Page, error)
	listPoolsMutex       sync.RWMutex
	listPoolsArgsForCall []struct {
		arg1 utils.RetryableServiceClient
		arg2 pools.ListOpts
	}
	listPoolsReturns struct {
		result1 pagination.Page
		result2 error
	}
	listPoolsReturnsOnCall map[int]struct {
		result1 pagination.Page
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLoadbalancerFacade) CreatePoolMember(arg1 utils.ServiceClient, arg2 string, arg3 pools.CreateMemberOpts) (*pools.Member, error) {
	fake.createPoolMemberMutex.Lock()
	ret, specificReturn := fake.createPoolMemberReturnsOnCall[len(fake.createPoolMemberArgsForCall)]
	fake.createPoolMemberArgsForCall = append(fake.createPoolMemberArgsForCall, struct {
		arg1 utils.ServiceClient
		arg2 string
		arg3 pools.CreateMemberOpts
	}{arg1, arg2, arg3})
	stub := fake.CreatePoolMemberStub
	fakeReturns := fake.createPoolMemberReturns
	fake.recordInvocation("CreatePoolMember", []interface{}{arg1, arg2, arg3})
	fake.createPoolMemberMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadbalancerFacade) CreatePoolMemberCallCount() int {
	fake.createPoolMemberMutex.RLock()
	defer fake.createPoolMemberMutex.RUnlock()
	return len(fake.createPoolMemberArgsForCall)
}

func (fake *FakeLoadbalancerFacade) CreatePoolMemberCalls(stub func(utils.ServiceClient, string, pools.CreateMemberOpts) (*pools.Member, error)) {
	fake.createPoolMemberMutex.Lock()
	defer fake.createPoolMemberMutex.Unlock()
	fake.CreatePoolMemberStub = stub
}

func (fake *FakeLoadbalancerFacade) CreatePoolMemberArgsForCall(i int) (utils.ServiceClient, string, pools.CreateMemberOpts) {
	fake.createPoolMemberMutex.RLock()
	defer fake.createPoolMemberMutex.RUnlock()
	argsForCall := fake.createPoolMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLoadbalancerFacade) CreatePoolMemberReturns(result1 *pools.Member, result2 error) {
	fake.createPoolMemberMutex.Lock()
	defer fake.createPoolMemberMutex.Unlock()
	fake.CreatePoolMemberStub = nil
	fake.createPoolMemberReturns = struct {
		result1 *pools.Member
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) CreatePoolMemberReturnsOnCall(i int, result1 *pools.Member, result2 error) {
	fake.createPoolMemberMutex.Lock()
	defer fake.createPoolMemberMutex.Unlock()
	fake.CreatePoolMemberStub = nil
	if fake.createPoolMemberReturnsOnCall == nil {
		fake.createPoolMemberReturnsOnCall = make(map[int]struct {
			result1 *pools.Member
			result2 error
		})
	}
	fake.createPoolMemberReturnsOnCall[i] = struct {
		result1 *pools.Member
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) DeletePoolMember(arg1 utils.RetryableServiceClient, arg2 string, arg3 string) error {
	fake.deletePoolMemberMutex.Lock()
	ret, specificReturn := fake.deletePoolMemberReturnsOnCall[len(fake.deletePoolMemberArgsForCall)]
	fake.deletePoolMemberArgsForCall = append(fake.deletePoolMemberArgsForCall, struct {
		arg1 utils.RetryableServiceClient
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeletePoolMemberStub
	fakeReturns := fake.deletePoolMemberReturns
	fake.recordInvocation("DeletePoolMember", []interface{}{arg1, arg2, arg3})
	fake.deletePoolMemberMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLoadbalancerFacade) DeletePoolMemberCallCount() int {
	fake.deletePoolMemberMutex.RLock()
	defer fake.deletePoolMemberMutex.RUnlock()
	return len(fake.deletePoolMemberArgsForCall)
}

func (fake *FakeLoadbalancerFacade) DeletePoolMemberCalls(stub func(utils.RetryableServiceClient, string, string) error) {
	fake.deletePoolMemberMutex.Lock()
	defer fake.deletePoolMemberMutex.Unlock()
	fake.DeletePoolMemberStub = stub
}

func (fake *FakeLoadbalancerFacade) DeletePoolMemberArgsForCall(i int) (utils.RetryableServiceClient, string, string) {
	fake.deletePoolMemberMutex.RLock()
	defer fake.deletePoolMemberMutex.RUnlock()
	argsForCall := fake.deletePoolMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLoadbalancerFacade) DeletePoolMemberReturns(result1 error) {
	fake.deletePoolMemberMutex.Lock()
	defer fake.deletePoolMemberMutex.Unlock()
	fake.DeletePoolMemberStub = nil
	fake.deletePoolMemberReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLoadbalancerFacade) DeletePoolMemberReturnsOnCall(i int, result1 error) {
	fake.deletePoolMemberMutex.Lock()
	defer fake.deletePoolMemberMutex.Unlock()
	fake.DeletePoolMemberStub = nil
	if fake.deletePoolMemberReturnsOnCall == nil {
		fake.deletePoolMemberReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePoolMemberReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLoadbalancerFacade) ExtractPoolMembers(arg1 pagination.Page) ([]pools.Member, error) {
	fake.extractPoolMembersMutex.Lock()
	ret, specificReturn := fake.extractPoolMembersReturnsOnCall[len(fake.extractPoolMembersArgsForCall)]
	fake.extractPoolMembersArgsForCall = append(fake.extractPoolMembersArgsForCall, struct {
		arg1 pagination.Page
	}{arg1})
	stub := fake.ExtractPoolMembersStub
	fakeReturns := fake.extractPoolMembersReturns
	fake.recordInvocation("ExtractPoolMembers", []interface{}{arg1})
	fake.extractPoolMembersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadbalancerFacade) ExtractPoolMembersCallCount() int {
	fake.extractPoolMembersMutex.RLock()
	defer fake.extractPoolMembersMutex.RUnlock()
	return len(fake.extractPoolMembersArgsForCall)
}

func (fake *FakeLoadbalancerFacade) ExtractPoolMembersCalls(stub func(pagination.Page) ([]pools.Member, error)) {
	fake.extractPoolMembersMutex.Lock()
	defer fake.extractPoolMembersMutex.Unlock()
	fake.ExtractPoolMembersStub = stub
}

func (fake *FakeLoadbalancerFacade) ExtractPoolMembersArgsForCall(i int) pagination.Page {
	fake.extractPoolMembersMutex.RLock()
	defer fake.extractPoolMembersMutex.RUnlock()
	argsForCall := fake.extractPoolMembersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLoadbalancerFacade) ExtractPoolMembersReturns(result1 []pools.Member, result2 error) {
	fake.extractPoolMembersMutex.Lock()
	defer fake.extractPoolMembersMutex.Unlock()
	fake.ExtractPoolMembersStub = nil
	fake.extractPoolMembersReturns = struct {
		result1 []pools.Member
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) ExtractPoolMembersReturnsOnCall(i int, result1 []pools.Member, result2 error) {
	fake.extractPoolMembersMutex.Lock()
	defer fake.extractPoolMembersMutex.Unlock()
	fake.ExtractPoolMembersStub = nil
	if fake.extractPoolMembersReturnsOnCall == nil {
		fake.extractPoolMembersReturnsOnCall = make(map[int]struct {
			result1 []pools.Member
			result2 error
		})
	}
	fake.extractPoolMembersReturnsOnCall[i] = struct {
		result1 []pools.Member
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) ExtractPools(arg1 pagination.Page) ([]pools.Pool, error) {
	fake.extractPoolsMutex.Lock()
	ret, specificReturn := fake.extractPoolsReturnsOnCall[len(fake.extractPoolsArgsForCall)]
	fake.extractPoolsArgsForCall = append(fake.extractPoolsArgsForCall, struct {
		arg1 pagination.Page
	}{arg1})
	stub := fake.ExtractPoolsStub
	fakeReturns := fake.extractPoolsReturns
	fake.recordInvocation("ExtractPools", []interface{}{arg1})
	fake.extractPoolsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadbalancerFacade) ExtractPoolsCallCount() int {
	fake.extractPoolsMutex.RLock()
	defer fake.extractPoolsMutex.RUnlock()
	return len(fake.extractPoolsArgsForCall)
}

func (fake *FakeLoadbalancerFacade) ExtractPoolsCalls(stub func(pagination.Page) ([]pools.Pool, error)) {
	fake.extractPoolsMutex.Lock()
	defer fake.extractPoolsMutex.Unlock()
	fake.ExtractPoolsStub = stub
}

func (fake *FakeLoadbalancerFacade) ExtractPoolsArgsForCall(i int) pagination.Page {
	fake.extractPoolsMutex.RLock()
	defer fake.extractPoolsMutex.RUnlock()
	argsForCall := fake.extractPoolsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLoadbalancerFacade) ExtractPoolsReturns(result1 []pools.Pool, result2 error) {
	fake.extractPoolsMutex.Lock()
	defer fake.extractPoolsMutex.Unlock()
	fake.ExtractPoolsStub = nil
	fake.extractPoolsReturns = struct {
		result1 []pools.Pool
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) ExtractPoolsReturnsOnCall(i int, result1 []pools.Pool, result2 error) {
	fake.extractPoolsMutex.Lock()
	defer fake.extractPoolsMutex.Unlock()
	fake.ExtractPoolsStub = nil
	if fake.extractPoolsReturnsOnCall == nil {
		fake.extractPoolsReturnsOnCall = make(map[int]struct {
			result1 []pools.Pool
			result2 error
		})
	}
	fake.extractPoolsReturnsOnCall[i] = struct {
		result1 []pools.Pool
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) GetListener(arg1 utils.RetryableServiceClient, arg2 string) (*listeners.Listener, error) {
	fake.getListenerMutex.Lock()
	ret, specificReturn := fake.getListenerReturnsOnCall[len(fake.getListenerArgsForCall)]
	fake.getListenerArgsForCall = append(fake.getListenerArgsForCall, struct {
		arg1 utils.RetryableServiceClient
		arg2 string
	}{arg1, arg2})
	stub := fake.GetListenerStub
	fakeReturns := fake.getListenerReturns
	fake.recordInvocation("GetListener", []interface{}{arg1, arg2})
	fake.getListenerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadbalancerFacade) GetListenerCallCount() int {
	fake.getListenerMutex.RLock()
	defer fake.getListenerMutex.RUnlock()
	return len(fake.getListenerArgsForCall)
}

func (fake *FakeLoadbalancerFacade) GetListenerCalls(stub func(utils.RetryableServiceClient, string) (*listeners.Listener, error)) {
	fake.getListenerMutex.Lock()
	defer fake.getListenerMutex.Unlock()
	fake.GetListenerStub = stub
}

func (fake *FakeLoadbalancerFacade) GetListenerArgsForCall(i int) (utils.RetryableServiceClient, string) {
	fake.getListenerMutex.RLock()
	defer fake.getListenerMutex.RUnlock()
	argsForCall := fake.getListenerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLoadbalancerFacade) GetListenerReturns(result1 *listeners.Listener, result2 error) {
	fake.getListenerMutex.Lock()
	defer fake.getListenerMutex.Unlock()
	fake.GetListenerStub = nil
	fake.getListenerReturns = struct {
		result1 *listeners.Listener
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) GetListenerReturnsOnCall(i int, result1 *listeners.Listener, result2 error) {
	fake.getListenerMutex.Lock()
	defer fake.getListenerMutex.Unlock()
	fake.GetListenerStub = nil
	if fake.getListenerReturnsOnCall == nil {
		fake.getListenerReturnsOnCall = make(map[int]struct {
			result1 *listeners.Listener
			result2 error
		})
	}
	fake.getListenerReturnsOnCall[i] = struct {
		result1 *listeners.Listener
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) GetLoadbalancer(arg1 utils.RetryableServiceClient, arg2 string) (*loadbalancers.LoadBalancer, error) {
	fake.getLoadbalancerMutex.Lock()
	ret, specificReturn := fake.getLoadbalancerReturnsOnCall[len(fake.getLoadbalancerArgsForCall)]
	fake.getLoadbalancerArgsForCall = append(fake.getLoadbalancerArgsForCall, struct {
		arg1 utils.RetryableServiceClient
		arg2 string
	}{arg1, arg2})
	stub := fake.GetLoadbalancerStub
	fakeReturns := fake.getLoadbalancerReturns
	fake.recordInvocation("GetLoadbalancer", []interface{}{arg1, arg2})
	fake.getLoadbalancerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadbalancerFacade) GetLoadbalancerCallCount() int {
	fake.getLoadbalancerMutex.RLock()
	defer fake.getLoadbalancerMutex.RUnlock()
	return len(fake.getLoadbalancerArgsForCall)
}

func (fake *FakeLoadbalancerFacade) GetLoadbalancerCalls(stub func(utils.RetryableServiceClient, string) (*loadbalancers.LoadBalancer, error)) {
	fake.getLoadbalancerMutex.Lock()
	defer fake.getLoadbalancerMutex.Unlock()
	fake.GetLoadbalancerStub = stub
}

func (fake *FakeLoadbalancerFacade) GetLoadbalancerArgsForCall(i int) (utils.RetryableServiceClient, string) {
	fake.getLoadbalancerMutex.RLock()
	defer fake.getLoadbalancerMutex.RUnlock()
	argsForCall := fake.getLoadbalancerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLoadbalancerFacade) GetLoadbalancerReturns(result1 *loadbalancers.LoadBalancer, result2 error) {
	fake.getLoadbalancerMutex.Lock()
	defer fake.getLoadbalancerMutex.Unlock()
	fake.GetLoadbalancerStub = nil
	fake.getLoadbalancerReturns = struct {
		result1 *loadbalancers.LoadBalancer
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) GetLoadbalancerReturnsOnCall(i int, result1 *loadbalancers.LoadBalancer, result2 error) {
	fake.getLoadbalancerMutex.Lock()
	defer fake.getLoadbalancerMutex.Unlock()
	fake.GetLoadbalancerStub = nil
	if fake.getLoadbalancerReturnsOnCall == nil {
		fake.getLoadbalancerReturnsOnCall = make(map[int]struct {
			result1 *loadbalancers.LoadBalancer
			result2 error
		})
	}
	fake.getLoadbalancerReturnsOnCall[i] = struct {
		result1 *loadbalancers.LoadBalancer
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) GetPool(arg1 utils.RetryableServiceClient, arg2 string) (*pools.Pool, error) {
	fake.getPoolMutex.Lock()
	ret, specificReturn := fake.getPoolReturnsOnCall[len(fake.getPoolArgsForCall)]
	fake.getPoolArgsForCall = append(fake.getPoolArgsForCall, struct {
		arg1 utils.RetryableServiceClient
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPoolStub
	fakeReturns := fake.getPoolReturns
	fake.recordInvocation("GetPool", []interface{}{arg1, arg2})
	fake.getPoolMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadbalancerFacade) GetPoolCallCount() int {
	fake.getPoolMutex.RLock()
	defer fake.getPoolMutex.RUnlock()
	return len(fake.getPoolArgsForCall)
}

func (fake *FakeLoadbalancerFacade) GetPoolCalls(stub func(utils.RetryableServiceClient, string) (*pools.Pool, error)) {
	fake.getPoolMutex.Lock()
	defer fake.getPoolMutex.Unlock()
	fake.GetPoolStub = stub
}

func (fake *FakeLoadbalancerFacade) GetPoolArgsForCall(i int) (utils.RetryableServiceClient, string) {
	fake.getPoolMutex.RLock()
	defer fake.getPoolMutex.RUnlock()
	argsForCall := fake.getPoolArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLoadbalancerFacade) GetPoolReturns(result1 *pools.Pool, result2 error) {
	fake.getPoolMutex.Lock()
	defer fake.getPoolMutex.Unlock()
	fake.GetPoolStub = nil
	fake.getPoolReturns = struct {
		result1 *pools.Pool
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) GetPoolReturnsOnCall(i int, result1 *pools.Pool, result2 error) {
	fake.getPoolMutex.Lock()
	defer fake.getPoolMutex.Unlock()
	fake.GetPoolStub = nil
	if fake.getPoolReturnsOnCall == nil {
		fake.getPoolReturnsOnCall = make(map[int]struct {
			result1 *pools.Pool
			result2 error
		})
	}
	fake.getPoolReturnsOnCall[i] = struct {
		result1 *pools.Pool
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) ListPoolMembers(arg1 utils.RetryableServiceClient, arg2 string, arg3 pools.ListMembersOpts) (pagination.Page, error) {
	fake.listPoolMembersMutex.Lock()
	ret, specificReturn := fake.listPoolMembersReturnsOnCall[len(fake.listPoolMembersArgsForCall)]
	fake.listPoolMembersArgsForCall = append(fake.listPoolMembersArgsForCall, struct {
		arg1 utils.RetryableServiceClient
		arg2 string
		arg3 pools.ListMembersOpts
	}{arg1, arg2, arg3})
	stub := fake.ListPoolMembersStub
	fakeReturns := fake.listPoolMembersReturns
	fake.recordInvocation("ListPoolMembers", []interface{}{arg1, arg2, arg3})
	fake.listPoolMembersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadbalancerFacade) ListPoolMembersCallCount() int {
	fake.listPoolMembersMutex.RLock()
	defer fake.listPoolMembersMutex.RUnlock()
	return len(fake.listPoolMembersArgsForCall)
}

func (fake *FakeLoadbalancerFacade) ListPoolMembersCalls(stub func(utils.RetryableServiceClient, string, pools.ListMembersOpts) (pagination.Page, error)) {
	fake.listPoolMembersMutex.Lock()
	defer fake.listPoolMembersMutex.Unlock()
	fake.ListPoolMembersStub = stub
}

func (fake *FakeLoadbalancerFacade) ListPoolMembersArgsForCall(i int) (utils.RetryableServiceClient, string, pools.ListMembersOpts) {
	fake.listPoolMembersMutex.RLock()
	defer fake.listPoolMembersMutex.RUnlock()
	argsForCall := fake.listPoolMembersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLoadbalancerFacade) ListPoolMembersReturns(result1 pagination.Page, result2 error) {
	fake.listPoolMembersMutex.Lock()
	defer fake.listPoolMembersMutex.Unlock()
	fake.ListPoolMembersStub = nil
	fake.listPoolMembersReturns = struct {
		result1 pagination.Page
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) ListPoolMembersReturnsOnCall(i int, result1 pagination.Page, result2 error) {
	fake.listPoolMembersMutex.Lock()
	defer fake.listPoolMembersMutex.Unlock()
	fake.ListPoolMembersStub = nil
	if fake.listPoolMembersReturnsOnCall == nil {
		fake.listPoolMembersReturnsOnCall = make(map[int]struct {
			result1 pagination.Page
			result2 error
		})
	}
	fake.listPoolMembersReturnsOnCall[i] = struct {
		result1 pagination.Page
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) ListPools(arg1 utils.RetryableServiceClient, arg2 pools.ListOpts) (pagination.Page, error) {
	fake.listPoolsMutex.Lock()
	ret, specificReturn := fake.listPoolsReturnsOnCall[len(fake.listPoolsArgsForCall)]
	fake.listPoolsArgsForCall = append(fake.listPoolsArgsForCall, struct {
		arg1 utils.RetryableServiceClient
		arg2 pools.ListOpts
	}{arg1, arg2})
	stub := fake.ListPoolsStub
	fakeReturns := fake.listPoolsReturns
	fake.recordInvocation("ListPools", []interface{}{arg1, arg2})
	fake.listPoolsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadbalancerFacade) ListPoolsCallCount() int {
	fake.listPoolsMutex.RLock()
	defer fake.listPoolsMutex.RUnlock()
	return len(fake.listPoolsArgsForCall)
}

func (fake *FakeLoadbalancerFacade) ListPoolsCalls(stub func(utils.RetryableServiceClient, pools.ListOpts) (pagination.Page, error)) {
	fake.listPoolsMutex.Lock()
	defer fake.listPoolsMutex.Unlock()
	fake.ListPoolsStub = stub
}

func (fake *FakeLoadbalancerFacade) ListPoolsArgsForCall(i int) (utils.RetryableServiceClient, pools.ListOpts) {
	fake.listPoolsMutex.RLock()
	defer fake.listPoolsMutex.RUnlock()
	argsForCall := fake.listPoolsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLoadbalancerFacade) ListPoolsReturns(result1 pagination.Page, result2 error) {
	fake.listPoolsMutex.Lock()
	defer fake.listPoolsMutex.Unlock()
	fake.ListPoolsStub = nil
	fake.listPoolsReturns = struct {
		result1 pagination.Page
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) ListPoolsReturnsOnCall(i int, result1 pagination.Page, result2 error) {
	fake.listPoolsMutex.Lock()
	defer fake.listPoolsMutex.Unlock()
	fake.ListPoolsStub = nil
	if fake.listPoolsReturnsOnCall == nil {
		fake.listPoolsReturnsOnCall = make(map[int]struct {
			result1 pagination.Page
			result2 error
		})
	}
	fake.listPoolsReturnsOnCall[i] = struct {
		result1 pagination.Page
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadbalancerFacade) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPoolMemberMutex.RLock()
	defer fake.createPoolMemberMutex.RUnlock()
	fake.deletePoolMemberMutex.RLock()
	defer fake.deletePoolMemberMutex.RUnlock()
	fake.extractPoolMembersMutex.RLock()
	defer fake.extractPoolMembersMutex.RUnlock()
	fake.extractPoolsMutex.RLock()
	defer fake.extractPoolsMutex.RUnlock()
	fake.getListenerMutex.RLock()
	defer fake.getListenerMutex.RUnlock()
	fake.getLoadbalancerMutex.RLock()
	defer fake.getLoadbalancerMutex.RUnlock()
	fake.getPoolMutex.RLock()
	defer fake.getPoolMutex.RUnlock()
	fake.listPoolMembersMutex.RLock()
	defer fake.listPoolMembersMutex.RUnlock()
	fake.listPoolsMutex.RLock()
	defer fake.listPoolsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLoadbalancerFacade) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ loadbalancer.LoadbalancerFacade = new(FakeLoadbalancerFacade)
