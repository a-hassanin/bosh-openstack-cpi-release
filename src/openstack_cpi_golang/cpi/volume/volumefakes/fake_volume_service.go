// Code generated by counterfeiter. DO NOT EDIT.
package volumefakes

import (
	"sync"
	"time"

	"github.com/cloudfoundry/bosh-openstack-cpi-release/src/openstack_cpi_golang/cpi/properties"
	"github.com/cloudfoundry/bosh-openstack-cpi-release/src/openstack_cpi_golang/cpi/volume"
	"github.com/gophercloud/gophercloud/openstack/blockstorage/v3/snapshots"
	"github.com/gophercloud/gophercloud/openstack/blockstorage/v3/volumes"
)

type FakeVolumeService struct {
	CreateSnapshotStub        func(string, bool, string, string, map[string]string) (*snapshots.Snapshot, error)
	createSnapshotMutex       sync.RWMutex
	createSnapshotArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 string
		arg4 string
		arg5 map[string]string
	}
	createSnapshotReturns struct {
		result1 *snapshots.Snapshot
		result2 error
	}
	createSnapshotReturnsOnCall map[int]struct {
		result1 *snapshots.Snapshot
		result2 error
	}
	CreateVolumeStub        func(int, properties.CreateDisk, string) (*volumes.Volume, error)
	createVolumeMutex       sync.RWMutex
	createVolumeArgsForCall []struct {
		arg1 int
		arg2 properties.CreateDisk
		arg3 string
	}
	createVolumeReturns struct {
		result1 *volumes.Volume
		result2 error
	}
	createVolumeReturnsOnCall map[int]struct {
		result1 *volumes.Volume
		result2 error
	}
	DeleteSnapshotStub        func(string) error
	deleteSnapshotMutex       sync.RWMutex
	deleteSnapshotArgsForCall []struct {
		arg1 string
	}
	deleteSnapshotReturns struct {
		result1 error
	}
	deleteSnapshotReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteVolumeStub        func(string) error
	deleteVolumeMutex       sync.RWMutex
	deleteVolumeArgsForCall []struct {
		arg1 string
	}
	deleteVolumeReturns struct {
		result1 error
	}
	deleteVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	ExtendVolumeSizeStub        func(string, int) error
	extendVolumeSizeMutex       sync.RWMutex
	extendVolumeSizeArgsForCall []struct {
		arg1 string
		arg2 int
	}
	extendVolumeSizeReturns struct {
		result1 error
	}
	extendVolumeSizeReturnsOnCall map[int]struct {
		result1 error
	}
	GetSnapshotStub        func(string) (*snapshots.Snapshot, error)
	getSnapshotMutex       sync.RWMutex
	getSnapshotArgsForCall []struct {
		arg1 string
	}
	getSnapshotReturns struct {
		result1 *snapshots.Snapshot
		result2 error
	}
	getSnapshotReturnsOnCall map[int]struct {
		result1 *snapshots.Snapshot
		result2 error
	}
	GetVolumeStub        func(string) (*volumes.Volume, error)
	getVolumeMutex       sync.RWMutex
	getVolumeArgsForCall []struct {
		arg1 string
	}
	getVolumeReturns struct {
		result1 *volumes.Volume
		result2 error
	}
	getVolumeReturnsOnCall map[int]struct {
		result1 *volumes.Volume
		result2 error
	}
	SetDiskMetadataStub        func(string, map[string]string) error
	setDiskMetadataMutex       sync.RWMutex
	setDiskMetadataArgsForCall []struct {
		arg1 string
		arg2 map[string]string
	}
	setDiskMetadataReturns struct {
		result1 error
	}
	setDiskMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateMetaDataSnapshotStub        func(string, map[string]interface{}) (map[string]interface{}, error)
	updateMetaDataSnapshotMutex       sync.RWMutex
	updateMetaDataSnapshotArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	updateMetaDataSnapshotReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	updateMetaDataSnapshotReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	WaitForSnapshotToBecomeStatusStub        func(string, time.Duration, string) error
	waitForSnapshotToBecomeStatusMutex       sync.RWMutex
	waitForSnapshotToBecomeStatusArgsForCall []struct {
		arg1 string
		arg2 time.Duration
		arg3 string
	}
	waitForSnapshotToBecomeStatusReturns struct {
		result1 error
	}
	waitForSnapshotToBecomeStatusReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForVolumeToBecomeStatusStub        func(string, time.Duration, string) error
	waitForVolumeToBecomeStatusMutex       sync.RWMutex
	waitForVolumeToBecomeStatusArgsForCall []struct {
		arg1 string
		arg2 time.Duration
		arg3 string
	}
	waitForVolumeToBecomeStatusReturns struct {
		result1 error
	}
	waitForVolumeToBecomeStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolumeService) CreateSnapshot(arg1 string, arg2 bool, arg3 string, arg4 string, arg5 map[string]string) (*snapshots.Snapshot, error) {
	fake.createSnapshotMutex.Lock()
	ret, specificReturn := fake.createSnapshotReturnsOnCall[len(fake.createSnapshotArgsForCall)]
	fake.createSnapshotArgsForCall = append(fake.createSnapshotArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 string
		arg4 string
		arg5 map[string]string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.CreateSnapshotStub
	fakeReturns := fake.createSnapshotReturns
	fake.recordInvocation("CreateSnapshot", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeService) CreateSnapshotCallCount() int {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return len(fake.createSnapshotArgsForCall)
}

func (fake *FakeVolumeService) CreateSnapshotCalls(stub func(string, bool, string, string, map[string]string) (*snapshots.Snapshot, error)) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = stub
}

func (fake *FakeVolumeService) CreateSnapshotArgsForCall(i int) (string, bool, string, string, map[string]string) {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	argsForCall := fake.createSnapshotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeVolumeService) CreateSnapshotReturns(result1 *snapshots.Snapshot, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	fake.createSnapshotReturns = struct {
		result1 *snapshots.Snapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) CreateSnapshotReturnsOnCall(i int, result1 *snapshots.Snapshot, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	if fake.createSnapshotReturnsOnCall == nil {
		fake.createSnapshotReturnsOnCall = make(map[int]struct {
			result1 *snapshots.Snapshot
			result2 error
		})
	}
	fake.createSnapshotReturnsOnCall[i] = struct {
		result1 *snapshots.Snapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) CreateVolume(arg1 int, arg2 properties.CreateDisk, arg3 string) (*volumes.Volume, error) {
	fake.createVolumeMutex.Lock()
	ret, specificReturn := fake.createVolumeReturnsOnCall[len(fake.createVolumeArgsForCall)]
	fake.createVolumeArgsForCall = append(fake.createVolumeArgsForCall, struct {
		arg1 int
		arg2 properties.CreateDisk
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CreateVolumeStub
	fakeReturns := fake.createVolumeReturns
	fake.recordInvocation("CreateVolume", []interface{}{arg1, arg2, arg3})
	fake.createVolumeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeService) CreateVolumeCallCount() int {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return len(fake.createVolumeArgsForCall)
}

func (fake *FakeVolumeService) CreateVolumeCalls(stub func(int, properties.CreateDisk, string) (*volumes.Volume, error)) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = stub
}

func (fake *FakeVolumeService) CreateVolumeArgsForCall(i int) (int, properties.CreateDisk, string) {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	argsForCall := fake.createVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVolumeService) CreateVolumeReturns(result1 *volumes.Volume, result2 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	fake.createVolumeReturns = struct {
		result1 *volumes.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) CreateVolumeReturnsOnCall(i int, result1 *volumes.Volume, result2 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	if fake.createVolumeReturnsOnCall == nil {
		fake.createVolumeReturnsOnCall = make(map[int]struct {
			result1 *volumes.Volume
			result2 error
		})
	}
	fake.createVolumeReturnsOnCall[i] = struct {
		result1 *volumes.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) DeleteSnapshot(arg1 string) error {
	fake.deleteSnapshotMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotReturnsOnCall[len(fake.deleteSnapshotArgsForCall)]
	fake.deleteSnapshotArgsForCall = append(fake.deleteSnapshotArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteSnapshotStub
	fakeReturns := fake.deleteSnapshotReturns
	fake.recordInvocation("DeleteSnapshot", []interface{}{arg1})
	fake.deleteSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeService) DeleteSnapshotCallCount() int {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return len(fake.deleteSnapshotArgsForCall)
}

func (fake *FakeVolumeService) DeleteSnapshotCalls(stub func(string) error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = stub
}

func (fake *FakeVolumeService) DeleteSnapshotArgsForCall(i int) string {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	argsForCall := fake.deleteSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVolumeService) DeleteSnapshotReturns(result1 error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = nil
	fake.deleteSnapshotReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) DeleteSnapshotReturnsOnCall(i int, result1 error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = nil
	if fake.deleteSnapshotReturnsOnCall == nil {
		fake.deleteSnapshotReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSnapshotReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) DeleteVolume(arg1 string) error {
	fake.deleteVolumeMutex.Lock()
	ret, specificReturn := fake.deleteVolumeReturnsOnCall[len(fake.deleteVolumeArgsForCall)]
	fake.deleteVolumeArgsForCall = append(fake.deleteVolumeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteVolumeStub
	fakeReturns := fake.deleteVolumeReturns
	fake.recordInvocation("DeleteVolume", []interface{}{arg1})
	fake.deleteVolumeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeService) DeleteVolumeCallCount() int {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return len(fake.deleteVolumeArgsForCall)
}

func (fake *FakeVolumeService) DeleteVolumeCalls(stub func(string) error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = stub
}

func (fake *FakeVolumeService) DeleteVolumeArgsForCall(i int) string {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	argsForCall := fake.deleteVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVolumeService) DeleteVolumeReturns(result1 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	fake.deleteVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) DeleteVolumeReturnsOnCall(i int, result1 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	if fake.deleteVolumeReturnsOnCall == nil {
		fake.deleteVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) ExtendVolumeSize(arg1 string, arg2 int) error {
	fake.extendVolumeSizeMutex.Lock()
	ret, specificReturn := fake.extendVolumeSizeReturnsOnCall[len(fake.extendVolumeSizeArgsForCall)]
	fake.extendVolumeSizeArgsForCall = append(fake.extendVolumeSizeArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	stub := fake.ExtendVolumeSizeStub
	fakeReturns := fake.extendVolumeSizeReturns
	fake.recordInvocation("ExtendVolumeSize", []interface{}{arg1, arg2})
	fake.extendVolumeSizeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeService) ExtendVolumeSizeCallCount() int {
	fake.extendVolumeSizeMutex.RLock()
	defer fake.extendVolumeSizeMutex.RUnlock()
	return len(fake.extendVolumeSizeArgsForCall)
}

func (fake *FakeVolumeService) ExtendVolumeSizeCalls(stub func(string, int) error) {
	fake.extendVolumeSizeMutex.Lock()
	defer fake.extendVolumeSizeMutex.Unlock()
	fake.ExtendVolumeSizeStub = stub
}

func (fake *FakeVolumeService) ExtendVolumeSizeArgsForCall(i int) (string, int) {
	fake.extendVolumeSizeMutex.RLock()
	defer fake.extendVolumeSizeMutex.RUnlock()
	argsForCall := fake.extendVolumeSizeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumeService) ExtendVolumeSizeReturns(result1 error) {
	fake.extendVolumeSizeMutex.Lock()
	defer fake.extendVolumeSizeMutex.Unlock()
	fake.ExtendVolumeSizeStub = nil
	fake.extendVolumeSizeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) ExtendVolumeSizeReturnsOnCall(i int, result1 error) {
	fake.extendVolumeSizeMutex.Lock()
	defer fake.extendVolumeSizeMutex.Unlock()
	fake.ExtendVolumeSizeStub = nil
	if fake.extendVolumeSizeReturnsOnCall == nil {
		fake.extendVolumeSizeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.extendVolumeSizeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) GetSnapshot(arg1 string) (*snapshots.Snapshot, error) {
	fake.getSnapshotMutex.Lock()
	ret, specificReturn := fake.getSnapshotReturnsOnCall[len(fake.getSnapshotArgsForCall)]
	fake.getSnapshotArgsForCall = append(fake.getSnapshotArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSnapshotStub
	fakeReturns := fake.getSnapshotReturns
	fake.recordInvocation("GetSnapshot", []interface{}{arg1})
	fake.getSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeService) GetSnapshotCallCount() int {
	fake.getSnapshotMutex.RLock()
	defer fake.getSnapshotMutex.RUnlock()
	return len(fake.getSnapshotArgsForCall)
}

func (fake *FakeVolumeService) GetSnapshotCalls(stub func(string) (*snapshots.Snapshot, error)) {
	fake.getSnapshotMutex.Lock()
	defer fake.getSnapshotMutex.Unlock()
	fake.GetSnapshotStub = stub
}

func (fake *FakeVolumeService) GetSnapshotArgsForCall(i int) string {
	fake.getSnapshotMutex.RLock()
	defer fake.getSnapshotMutex.RUnlock()
	argsForCall := fake.getSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVolumeService) GetSnapshotReturns(result1 *snapshots.Snapshot, result2 error) {
	fake.getSnapshotMutex.Lock()
	defer fake.getSnapshotMutex.Unlock()
	fake.GetSnapshotStub = nil
	fake.getSnapshotReturns = struct {
		result1 *snapshots.Snapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) GetSnapshotReturnsOnCall(i int, result1 *snapshots.Snapshot, result2 error) {
	fake.getSnapshotMutex.Lock()
	defer fake.getSnapshotMutex.Unlock()
	fake.GetSnapshotStub = nil
	if fake.getSnapshotReturnsOnCall == nil {
		fake.getSnapshotReturnsOnCall = make(map[int]struct {
			result1 *snapshots.Snapshot
			result2 error
		})
	}
	fake.getSnapshotReturnsOnCall[i] = struct {
		result1 *snapshots.Snapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) GetVolume(arg1 string) (*volumes.Volume, error) {
	fake.getVolumeMutex.Lock()
	ret, specificReturn := fake.getVolumeReturnsOnCall[len(fake.getVolumeArgsForCall)]
	fake.getVolumeArgsForCall = append(fake.getVolumeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetVolumeStub
	fakeReturns := fake.getVolumeReturns
	fake.recordInvocation("GetVolume", []interface{}{arg1})
	fake.getVolumeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeService) GetVolumeCallCount() int {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return len(fake.getVolumeArgsForCall)
}

func (fake *FakeVolumeService) GetVolumeCalls(stub func(string) (*volumes.Volume, error)) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = stub
}

func (fake *FakeVolumeService) GetVolumeArgsForCall(i int) string {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	argsForCall := fake.getVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVolumeService) GetVolumeReturns(result1 *volumes.Volume, result2 error) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = nil
	fake.getVolumeReturns = struct {
		result1 *volumes.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) GetVolumeReturnsOnCall(i int, result1 *volumes.Volume, result2 error) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = nil
	if fake.getVolumeReturnsOnCall == nil {
		fake.getVolumeReturnsOnCall = make(map[int]struct {
			result1 *volumes.Volume
			result2 error
		})
	}
	fake.getVolumeReturnsOnCall[i] = struct {
		result1 *volumes.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) SetDiskMetadata(arg1 string, arg2 map[string]string) error {
	fake.setDiskMetadataMutex.Lock()
	ret, specificReturn := fake.setDiskMetadataReturnsOnCall[len(fake.setDiskMetadataArgsForCall)]
	fake.setDiskMetadataArgsForCall = append(fake.setDiskMetadataArgsForCall, struct {
		arg1 string
		arg2 map[string]string
	}{arg1, arg2})
	stub := fake.SetDiskMetadataStub
	fakeReturns := fake.setDiskMetadataReturns
	fake.recordInvocation("SetDiskMetadata", []interface{}{arg1, arg2})
	fake.setDiskMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeService) SetDiskMetadataCallCount() int {
	fake.setDiskMetadataMutex.RLock()
	defer fake.setDiskMetadataMutex.RUnlock()
	return len(fake.setDiskMetadataArgsForCall)
}

func (fake *FakeVolumeService) SetDiskMetadataCalls(stub func(string, map[string]string) error) {
	fake.setDiskMetadataMutex.Lock()
	defer fake.setDiskMetadataMutex.Unlock()
	fake.SetDiskMetadataStub = stub
}

func (fake *FakeVolumeService) SetDiskMetadataArgsForCall(i int) (string, map[string]string) {
	fake.setDiskMetadataMutex.RLock()
	defer fake.setDiskMetadataMutex.RUnlock()
	argsForCall := fake.setDiskMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumeService) SetDiskMetadataReturns(result1 error) {
	fake.setDiskMetadataMutex.Lock()
	defer fake.setDiskMetadataMutex.Unlock()
	fake.SetDiskMetadataStub = nil
	fake.setDiskMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) SetDiskMetadataReturnsOnCall(i int, result1 error) {
	fake.setDiskMetadataMutex.Lock()
	defer fake.setDiskMetadataMutex.Unlock()
	fake.SetDiskMetadataStub = nil
	if fake.setDiskMetadataReturnsOnCall == nil {
		fake.setDiskMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setDiskMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) UpdateMetaDataSnapshot(arg1 string, arg2 map[string]interface{}) (map[string]interface{}, error) {
	fake.updateMetaDataSnapshotMutex.Lock()
	ret, specificReturn := fake.updateMetaDataSnapshotReturnsOnCall[len(fake.updateMetaDataSnapshotArgsForCall)]
	fake.updateMetaDataSnapshotArgsForCall = append(fake.updateMetaDataSnapshotArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	stub := fake.UpdateMetaDataSnapshotStub
	fakeReturns := fake.updateMetaDataSnapshotReturns
	fake.recordInvocation("UpdateMetaDataSnapshot", []interface{}{arg1, arg2})
	fake.updateMetaDataSnapshotMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumeService) UpdateMetaDataSnapshotCallCount() int {
	fake.updateMetaDataSnapshotMutex.RLock()
	defer fake.updateMetaDataSnapshotMutex.RUnlock()
	return len(fake.updateMetaDataSnapshotArgsForCall)
}

func (fake *FakeVolumeService) UpdateMetaDataSnapshotCalls(stub func(string, map[string]interface{}) (map[string]interface{}, error)) {
	fake.updateMetaDataSnapshotMutex.Lock()
	defer fake.updateMetaDataSnapshotMutex.Unlock()
	fake.UpdateMetaDataSnapshotStub = stub
}

func (fake *FakeVolumeService) UpdateMetaDataSnapshotArgsForCall(i int) (string, map[string]interface{}) {
	fake.updateMetaDataSnapshotMutex.RLock()
	defer fake.updateMetaDataSnapshotMutex.RUnlock()
	argsForCall := fake.updateMetaDataSnapshotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumeService) UpdateMetaDataSnapshotReturns(result1 map[string]interface{}, result2 error) {
	fake.updateMetaDataSnapshotMutex.Lock()
	defer fake.updateMetaDataSnapshotMutex.Unlock()
	fake.UpdateMetaDataSnapshotStub = nil
	fake.updateMetaDataSnapshotReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) UpdateMetaDataSnapshotReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.updateMetaDataSnapshotMutex.Lock()
	defer fake.updateMetaDataSnapshotMutex.Unlock()
	fake.UpdateMetaDataSnapshotStub = nil
	if fake.updateMetaDataSnapshotReturnsOnCall == nil {
		fake.updateMetaDataSnapshotReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.updateMetaDataSnapshotReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeService) WaitForSnapshotToBecomeStatus(arg1 string, arg2 time.Duration, arg3 string) error {
	fake.waitForSnapshotToBecomeStatusMutex.Lock()
	ret, specificReturn := fake.waitForSnapshotToBecomeStatusReturnsOnCall[len(fake.waitForSnapshotToBecomeStatusArgsForCall)]
	fake.waitForSnapshotToBecomeStatusArgsForCall = append(fake.waitForSnapshotToBecomeStatusArgsForCall, struct {
		arg1 string
		arg2 time.Duration
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.WaitForSnapshotToBecomeStatusStub
	fakeReturns := fake.waitForSnapshotToBecomeStatusReturns
	fake.recordInvocation("WaitForSnapshotToBecomeStatus", []interface{}{arg1, arg2, arg3})
	fake.waitForSnapshotToBecomeStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeService) WaitForSnapshotToBecomeStatusCallCount() int {
	fake.waitForSnapshotToBecomeStatusMutex.RLock()
	defer fake.waitForSnapshotToBecomeStatusMutex.RUnlock()
	return len(fake.waitForSnapshotToBecomeStatusArgsForCall)
}

func (fake *FakeVolumeService) WaitForSnapshotToBecomeStatusCalls(stub func(string, time.Duration, string) error) {
	fake.waitForSnapshotToBecomeStatusMutex.Lock()
	defer fake.waitForSnapshotToBecomeStatusMutex.Unlock()
	fake.WaitForSnapshotToBecomeStatusStub = stub
}

func (fake *FakeVolumeService) WaitForSnapshotToBecomeStatusArgsForCall(i int) (string, time.Duration, string) {
	fake.waitForSnapshotToBecomeStatusMutex.RLock()
	defer fake.waitForSnapshotToBecomeStatusMutex.RUnlock()
	argsForCall := fake.waitForSnapshotToBecomeStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVolumeService) WaitForSnapshotToBecomeStatusReturns(result1 error) {
	fake.waitForSnapshotToBecomeStatusMutex.Lock()
	defer fake.waitForSnapshotToBecomeStatusMutex.Unlock()
	fake.WaitForSnapshotToBecomeStatusStub = nil
	fake.waitForSnapshotToBecomeStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) WaitForSnapshotToBecomeStatusReturnsOnCall(i int, result1 error) {
	fake.waitForSnapshotToBecomeStatusMutex.Lock()
	defer fake.waitForSnapshotToBecomeStatusMutex.Unlock()
	fake.WaitForSnapshotToBecomeStatusStub = nil
	if fake.waitForSnapshotToBecomeStatusReturnsOnCall == nil {
		fake.waitForSnapshotToBecomeStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForSnapshotToBecomeStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) WaitForVolumeToBecomeStatus(arg1 string, arg2 time.Duration, arg3 string) error {
	fake.waitForVolumeToBecomeStatusMutex.Lock()
	ret, specificReturn := fake.waitForVolumeToBecomeStatusReturnsOnCall[len(fake.waitForVolumeToBecomeStatusArgsForCall)]
	fake.waitForVolumeToBecomeStatusArgsForCall = append(fake.waitForVolumeToBecomeStatusArgsForCall, struct {
		arg1 string
		arg2 time.Duration
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.WaitForVolumeToBecomeStatusStub
	fakeReturns := fake.waitForVolumeToBecomeStatusReturns
	fake.recordInvocation("WaitForVolumeToBecomeStatus", []interface{}{arg1, arg2, arg3})
	fake.waitForVolumeToBecomeStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVolumeService) WaitForVolumeToBecomeStatusCallCount() int {
	fake.waitForVolumeToBecomeStatusMutex.RLock()
	defer fake.waitForVolumeToBecomeStatusMutex.RUnlock()
	return len(fake.waitForVolumeToBecomeStatusArgsForCall)
}

func (fake *FakeVolumeService) WaitForVolumeToBecomeStatusCalls(stub func(string, time.Duration, string) error) {
	fake.waitForVolumeToBecomeStatusMutex.Lock()
	defer fake.waitForVolumeToBecomeStatusMutex.Unlock()
	fake.WaitForVolumeToBecomeStatusStub = stub
}

func (fake *FakeVolumeService) WaitForVolumeToBecomeStatusArgsForCall(i int) (string, time.Duration, string) {
	fake.waitForVolumeToBecomeStatusMutex.RLock()
	defer fake.waitForVolumeToBecomeStatusMutex.RUnlock()
	argsForCall := fake.waitForVolumeToBecomeStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVolumeService) WaitForVolumeToBecomeStatusReturns(result1 error) {
	fake.waitForVolumeToBecomeStatusMutex.Lock()
	defer fake.waitForVolumeToBecomeStatusMutex.Unlock()
	fake.WaitForVolumeToBecomeStatusStub = nil
	fake.waitForVolumeToBecomeStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) WaitForVolumeToBecomeStatusReturnsOnCall(i int, result1 error) {
	fake.waitForVolumeToBecomeStatusMutex.Lock()
	defer fake.waitForVolumeToBecomeStatusMutex.Unlock()
	fake.WaitForVolumeToBecomeStatusStub = nil
	if fake.waitForVolumeToBecomeStatusReturnsOnCall == nil {
		fake.waitForVolumeToBecomeStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForVolumeToBecomeStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	fake.extendVolumeSizeMutex.RLock()
	defer fake.extendVolumeSizeMutex.RUnlock()
	fake.getSnapshotMutex.RLock()
	defer fake.getSnapshotMutex.RUnlock()
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	fake.setDiskMetadataMutex.RLock()
	defer fake.setDiskMetadataMutex.RUnlock()
	fake.updateMetaDataSnapshotMutex.RLock()
	defer fake.updateMetaDataSnapshotMutex.RUnlock()
	fake.waitForSnapshotToBecomeStatusMutex.RLock()
	defer fake.waitForSnapshotToBecomeStatusMutex.RUnlock()
	fake.waitForVolumeToBecomeStatusMutex.RLock()
	defer fake.waitForVolumeToBecomeStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVolumeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ volume.VolumeService = new(FakeVolumeService)
